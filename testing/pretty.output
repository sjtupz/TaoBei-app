功能: 用户登录 # features/login.feature:2
  作为一个用户
  我想要能够登录系统
  以便访问我的账户
  功能: 用户登录  # features/login.feature:2

  场景: 请求验证码时手机号格式无效                    # features/login.feature:11
    假如 系统已经启动                          # features/steps/login_steps.py:13
    并且 数据库已经初始化                        # features/steps/login_steps.py:20
    假如 用户在登录页面                         # features/steps/login_steps.py:28
      Traceback (most recent call last):
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\model.py", line 1991, in run
          match.run(runner.context)
          ~~~~~~~~~^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\matchers.py", line 105, in run
          self.func(context, *args, **kwargs)
          ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "features\steps\login_steps.py", line 50, in step_user_on_login_page
          context.login_page.navigate_to_login_page()
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
        File "D:\Project\taobei-app\testing\pages\login_page.py", line 38, in navigate_to_login_page
          self.page.goto("http://localhost:5173/login", timeout=30000)
          ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\sync_api\_generated.py", line 9019, in goto
          self._sync(
          ~~~~~~~~~~^
              self._impl_obj.goto(
              ^^^^^^^^^^^^^^^^^^^^
                  url=url, timeout=timeout, waitUntil=wait_until, referer=referer
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              )
              ^
          )
          ^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_sync_base.py", line 115, in _sync
          return task.result()
                 ~~~~~~~~~~~^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_page.py", line 556, in goto
          return await self._main_frame.goto(**locals_to_params(locals()))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_frame.py", line 153, in goto
          await self._channel.send(
              "goto", self._navigation_timeout, locals_to_params(locals())
          )
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_connection.py", line 69, in send
          return await self._connection.wrap_api_call(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          ...<3 lines>...
          )
          ^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_connection.py", line 558, in wrap_api_call
          raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
      playwright._impl._errors.Error: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost:5173/login
      Call log:
        - navigating to "http://localhost:5173/login", waiting until "load"

    当 用户在登录页面输入一个无效的手机号"123"并点击"获取验证码" # None
    那么 系统不发送验证码                        # None
    并且 页面提示"请输入正确的手机号码"                # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 请求验证码时手机号格式无效
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 请求验证码时手机号格式无效
----
CAPTURED STDOUT: scenario
系统已经启动
数据库已经初始化
导航到登录页面失败: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost:5173/login
Call log:
  - navigating to "http://localhost:5173/login", waiting until "load"
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 成功获取验证码                                    # features/login.feature:17
    假如 系统已经启动                                    # features/steps/login_steps.py:13
    并且 数据库已经初始化                                  # features/steps/login_steps.py:20
    假如 用户在登录页面                                   # features/steps/login_steps.py:28
      Traceback (most recent call last):
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\model.py", line 1991, in run
          match.run(runner.context)
          ~~~~~~~~~^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\matchers.py", line 105, in run
          self.func(context, *args, **kwargs)
          ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "features\steps\login_steps.py", line 50, in step_user_on_login_page
          context.login_page.navigate_to_login_page()
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
        File "D:\Project\taobei-app\testing\pages\login_page.py", line 38, in navigate_to_login_page
          self.page.goto("http://localhost:5173/login", timeout=30000)
          ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\sync_api\_generated.py", line 9019, in goto
          self._sync(
          ~~~~~~~~~~^
              self._impl_obj.goto(
              ^^^^^^^^^^^^^^^^^^^^
                  url=url, timeout=timeout, waitUntil=wait_until, referer=referer
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              )
              ^
          )
          ^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_sync_base.py", line 115, in _sync
          return task.result()
                 ~~~~~~~~~~~^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_page.py", line 556, in goto
          return await self._main_frame.goto(**locals_to_params(locals()))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_frame.py", line 153, in goto
          await self._channel.send(
              "goto", self._navigation_timeout, locals_to_params(locals())
          )
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_connection.py", line 69, in send
          return await self._connection.wrap_api_call(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          ...<3 lines>...
          )
          ^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_connection.py", line 558, in wrap_api_call
          raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
      playwright._impl._errors.Error: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost:5173/login
      Call log:
        - navigating to "http://localhost:5173/login", waiting until "load"

    当 用户在登录页面输入一个格式正确的手机号"13800138000"并点击"获取验证码" # None
    那么 系统为该手机号生成一个6位验证码并打印在控制台                   # None
    并且 "获取验证码"按钮进入60秒倒计时且不可点击                    # None
    并且 数据库记录手机号和验证码，有效期为60秒                      # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功获取验证码
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功获取验证码
----
CAPTURED STDOUT: scenario
系统已经启动
数据库已经初始化
导航到登录页面失败: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost:5173/login
Call log:
  - navigating to "http://localhost:5173/login", waiting until "load"
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 使用未注册的手机号登录               # features/login.feature:24
    假如 系统已经启动                   # features/steps/login_steps.py:13
    并且 数据库已经初始化                 # features/steps/login_steps.py:20
    假如 一个手机号"13900139000"未被注册   # features/steps/login_steps.py:55
    并且 用户在登录页面                  # features/steps/login_steps.py:28
      Traceback (most recent call last):
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\model.py", line 1991, in run
          match.run(runner.context)
          ~~~~~~~~~^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\matchers.py", line 105, in run
          self.func(context, *args, **kwargs)
          ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "features\steps\login_steps.py", line 50, in step_user_on_login_page
          context.login_page.navigate_to_login_page()
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
        File "D:\Project\taobei-app\testing\pages\login_page.py", line 38, in navigate_to_login_page
          self.page.goto("http://localhost:5173/login", timeout=30000)
          ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\sync_api\_generated.py", line 9019, in goto
          self._sync(
          ~~~~~~~~~~^
              self._impl_obj.goto(
              ^^^^^^^^^^^^^^^^^^^^
                  url=url, timeout=timeout, waitUntil=wait_until, referer=referer
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              )
              ^
          )
          ^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_sync_base.py", line 115, in _sync
          return task.result()
                 ~~~~~~~~~~~^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_page.py", line 556, in goto
          return await self._main_frame.goto(**locals_to_params(locals()))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_frame.py", line 153, in goto
          await self._channel.send(
              "goto", self._navigation_timeout, locals_to_params(locals())
          )
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_connection.py", line 69, in send
          return await self._connection.wrap_api_call(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          ...<3 lines>...
          )
          ^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_connection.py", line 558, in wrap_api_call
          raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
      playwright._impl._errors.Error: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost:5173/login
      Call log:
        - navigating to "http://localhost:5173/login", waiting until "load"

    当 用户使用该未注册的手机号和正确的验证码点击"登录" # None
    那么 系统不让用户登录                 # None
    并且 页面提示"该手机号未注册，请先完成注册"     # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 使用未注册的手机号登录
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 使用未注册的手机号登录
----
CAPTURED STDOUT: scenario
系统已经启动
数据库已经初始化
手机号 13900139000 未被注册
导航到登录页面失败: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost:5173/login
Call log:
  - navigating to "http://localhost:5173/login", waiting until "load"
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 使用错误的验证码登录                    # features/login.feature:31
    假如 系统已经启动                       # features/steps/login_steps.py:13
    并且 数据库已经初始化                     # features/steps/login_steps.py:20
    假如 一个手机号"13800138000"已被注册       # features/steps/login_steps.py:64
    并且 用户在登录页面                      # features/steps/login_steps.py:28
      Traceback (most recent call last):
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\model.py", line 1991, in run
          match.run(runner.context)
          ~~~~~~~~~^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\matchers.py", line 105, in run
          self.func(context, *args, **kwargs)
          ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "features\steps\login_steps.py", line 50, in step_user_on_login_page
          context.login_page.navigate_to_login_page()
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
        File "D:\Project\taobei-app\testing\pages\login_page.py", line 38, in navigate_to_login_page
          self.page.goto("http://localhost:5173/login", timeout=30000)
          ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\sync_api\_generated.py", line 9019, in goto
          self._sync(
          ~~~~~~~~~~^
              self._impl_obj.goto(
              ^^^^^^^^^^^^^^^^^^^^
                  url=url, timeout=timeout, waitUntil=wait_until, referer=referer
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              )
              ^
          )
          ^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_sync_base.py", line 115, in _sync
          return task.result()
                 ~~~~~~~~~~~^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_page.py", line 556, in goto
          return await self._main_frame.goto(**locals_to_params(locals()))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_frame.py", line 153, in goto
          await self._channel.send(
              "goto", self._navigation_timeout, locals_to_params(locals())
          )
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_connection.py", line 69, in send
          return await self._connection.wrap_api_call(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          ...<3 lines>...
          )
          ^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_connection.py", line 558, in wrap_api_call
          raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
      playwright._impl._errors.Error: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost:5173/login
      Call log:
        - navigating to "http://localhost:5173/login", waiting until "load"

    当 用户使用该手机号和错误的验证码"000000"点击"登录" # None
    那么 系统不让用户登录                     # None
    并且 页面提示"验证码错误"                  # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 使用错误的验证码登录
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 使用错误的验证码登录
----
CAPTURED STDOUT: scenario
系统已经启动
数据库已经初始化
手机号 13800138000 已被注册
导航到登录页面失败: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost:5173/login
Call log:
  - navigating to "http://localhost:5173/login", waiting until "load"
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 成功登录                    # features/login.feature:38
    假如 系统已经启动                 # features/steps/login_steps.py:13
    并且 数据库已经初始化               # features/steps/login_steps.py:20
    假如 一个手机号"13800138000"已被注册 # features/steps/login_steps.py:64
    并且 用户在登录页面                # features/steps/login_steps.py:28
      Traceback (most recent call last):
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\model.py", line 1991, in run
          match.run(runner.context)
          ~~~~~~~~~^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\matchers.py", line 105, in run
          self.func(context, *args, **kwargs)
          ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "features\steps\login_steps.py", line 50, in step_user_on_login_page
          context.login_page.navigate_to_login_page()
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
        File "D:\Project\taobei-app\testing\pages\login_page.py", line 38, in navigate_to_login_page
          self.page.goto("http://localhost:5173/login", timeout=30000)
          ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\sync_api\_generated.py", line 9019, in goto
          self._sync(
          ~~~~~~~~~~^
              self._impl_obj.goto(
              ^^^^^^^^^^^^^^^^^^^^
                  url=url, timeout=timeout, waitUntil=wait_until, referer=referer
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              )
              ^
          )
          ^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_sync_base.py", line 115, in _sync
          return task.result()
                 ~~~~~~~~~~~^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_page.py", line 556, in goto
          return await self._main_frame.goto(**locals_to_params(locals()))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_frame.py", line 153, in goto
          await self._channel.send(
              "goto", self._navigation_timeout, locals_to_params(locals())
          )
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_connection.py", line 69, in send
          return await self._connection.wrap_api_call(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          ...<3 lines>...
          )
          ^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\playwright\_impl\_connection.py", line 558, in wrap_api_call
          raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
      playwright._impl._errors.Error: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost:5173/login
      Call log:
        - navigating to "http://localhost:5173/login", waiting until "load"

    当 用户使用该手机号和正确的验证码点击"登录"   # None
    那么 系统验证成功                 # None
    并且 页面提示"登录成功"             # None
    并且 页面自动跳转到首页              # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功登录
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功登录
----
CAPTURED STDOUT: scenario
系统已经启动
数据库已经初始化
手机号 13800138000 已被注册
导航到登录页面失败: Page.goto: net::ERR_CONNECTION_REFUSED at http://localhost:5173/login
Call log:
  - navigating to "http://localhost:5173/login", waiting until "load"
---- CAPTURED_SCENARIO_OUTPUT_END ----

功能: 商品管理 # features/product_management.feature:2
  作为一个用户
  我希望能够浏览和搜索商品
  以便找到我需要的商品信息
  功能: 商品管理  # features/product_management.feature:2

  场景: 成功获取商品列表 - 默认参数          # features/product_management.feature:12
    假设 系统已经启动并运行正常             # None
    并且 测试数据库已经初始化              # None
    并且 系统中存在商品数据               # None
    假设 系统中存在商品数据               # None
    当 用户请求商品列表                 # None
    那么 系统返回分页的商品列表             # None
    并且 包含商品的基本信息（ID、名称、价格、图片等） # None
    并且 商品列表页面显示商品信息            # None
    并且 显示分页控件                  # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功获取商品列表 - 默认参数
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功获取商品列表 - 默认参数
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 成功获取商品列表 - 自定义分页参数 -- @1.1   # features/product_management.feature:30
    假设 系统已经启动并运行正常                   # None
    并且 测试数据库已经初始化                    # None
    并且 系统中存在商品数据                     # None
    假设 系统中存在商品数据                     # None
    当 用户请求商品列表，页码为 1，每页数量为 10        # None
    那么 系统返回分页的商品列表                   # None
    并且 包含商品的基本信息（ID、名称、价格、图片等）       # None
    并且 返回的商品数量不超过 10                 # None
    并且 商品列表页面显示第 1 页的商品              # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功获取商品列表 - 自定义分页参数 -- @1.1 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功获取商品列表 - 自定义分页参数 -- @1.1
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 成功获取商品列表 - 自定义分页参数 -- @1.2   # features/product_management.feature:31
    假设 系统已经启动并运行正常                   # None
    并且 测试数据库已经初始化                    # None
    并且 系统中存在商品数据                     # None
    假设 系统中存在商品数据                     # None
    当 用户请求商品列表，页码为 2，每页数量为 5         # None
    那么 系统返回分页的商品列表                   # None
    并且 包含商品的基本信息（ID、名称、价格、图片等）       # None
    并且 返回的商品数量不超过 5                  # None
    并且 商品列表页面显示第 2 页的商品              # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功获取商品列表 - 自定义分页参数 -- @1.2 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功获取商品列表 - 自定义分页参数 -- @1.2
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 成功获取商品列表 - 自定义分页参数 -- @1.3   # features/product_management.feature:32
    假设 系统已经启动并运行正常                   # None
    并且 测试数据库已经初始化                    # None
    并且 系统中存在商品数据                     # None
    假设 系统中存在商品数据                     # None
    当 用户请求商品列表，页码为 1，每页数量为 20        # None
    那么 系统返回分页的商品列表                   # None
    并且 包含商品的基本信息（ID、名称、价格、图片等）       # None
    并且 返回的商品数量不超过 20                 # None
    并且 商品列表页面显示第 1 页的商品              # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功获取商品列表 - 自定义分页参数 -- @1.3 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功获取商品列表 - 自定义分页参数 -- @1.3
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 成功获取商品列表 - 自定义分页参数 -- @1.4   # features/product_management.feature:33
    假设 系统已经启动并运行正常                   # None
    并且 测试数据库已经初始化                    # None
    并且 系统中存在商品数据                     # None
    假设 系统中存在商品数据                     # None
    当 用户请求商品列表，页码为 3，每页数量为 8         # None
    那么 系统返回分页的商品列表                   # None
    并且 包含商品的基本信息（ID、名称、价格、图片等）       # None
    并且 返回的商品数量不超过 8                  # None
    并且 商品列表页面显示第 3 页的商品              # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功获取商品列表 - 自定义分页参数 -- @1.4 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功获取商品列表 - 自定义分页参数 -- @1.4
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 商品列表分页参数验证 -- @1.1    # features/product_management.feature:43
    假设 系统已经启动并运行正常            # None
    并且 测试数据库已经初始化             # None
    并且 系统中存在商品数据              # None
    假设 系统中存在商品数据              # None
    当 用户请求商品列表，页码为 0，每页数量为 10 # None
    那么 系统返回400错误              # None
    并且 错误信息包含 "页码必须是大于0的整数"   # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 商品列表分页参数验证 -- @1.1 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 商品列表分页参数验证 -- @1.1
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 商品列表分页参数验证 -- @1.2     # features/product_management.feature:44
    假设 系统已经启动并运行正常             # None
    并且 测试数据库已经初始化              # None
    并且 系统中存在商品数据               # None
    假设 系统中存在商品数据               # None
    当 用户请求商品列表，页码为 -1，每页数量为 10 # None
    那么 系统返回400错误               # None
    并且 错误信息包含 "页码必须是大于0的整数"    # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 商品列表分页参数验证 -- @1.2 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 商品列表分页参数验证 -- @1.2
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 商品列表分页参数验证 -- @1.3        # features/product_management.feature:45
    假设 系统已经启动并运行正常                # None
    并且 测试数据库已经初始化                 # None
    并且 系统中存在商品数据                  # None
    假设 系统中存在商品数据                  # None
    当 用户请求商品列表，页码为 1，每页数量为 0      # None
    那么 系统返回400错误                  # None
    并且 错误信息包含 "每页数量必须是1-100之间的整数" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 商品列表分页参数验证 -- @1.3 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 商品列表分页参数验证 -- @1.3
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 商品列表分页参数验证 -- @1.4        # features/product_management.feature:46
    假设 系统已经启动并运行正常                # None
    并且 测试数据库已经初始化                 # None
    并且 系统中存在商品数据                  # None
    假设 系统中存在商品数据                  # None
    当 用户请求商品列表，页码为 1，每页数量为 101    # None
    那么 系统返回400错误                  # None
    并且 错误信息包含 "每页数量必须是1-100之间的整数" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 商品列表分页参数验证 -- @1.4 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 商品列表分页参数验证 -- @1.4
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 根据关键词搜索商品 -- @1.1   # features/product_management.feature:57
    假设 系统已经启动并运行正常          # None
    并且 测试数据库已经初始化           # None
    并且 系统中存在商品数据            # None
    假设 系统中存在商品数据            # None
    当 用户输入搜索关键词 "手机"        # None
    那么 系统返回匹配的商品列表          # None
    并且 商品列表页面显示搜索结果         # None
    并且 搜索结果中的商品名称包含关键词 "手机" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 根据关键词搜索商品 -- @1.1 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 根据关键词搜索商品 -- @1.1
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 根据关键词搜索商品 -- @1.2   # features/product_management.feature:58
    假设 系统已经启动并运行正常          # None
    并且 测试数据库已经初始化           # None
    并且 系统中存在商品数据            # None
    假设 系统中存在商品数据            # None
    当 用户输入搜索关键词 "苹果"        # None
    那么 系统返回匹配的商品列表          # None
    并且 商品列表页面显示搜索结果         # None
    并且 搜索结果中的商品名称包含关键词 "苹果" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 根据关键词搜索商品 -- @1.2 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 根据关键词搜索商品 -- @1.2
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 根据关键词搜索商品 -- @1.3       # features/product_management.feature:59
    假设 系统已经启动并运行正常              # None
    并且 测试数据库已经初始化               # None
    并且 系统中存在商品数据                # None
    假设 系统中存在商品数据                # None
    当 用户输入搜索关键词 "iPhone"        # None
    那么 系统返回匹配的商品列表              # None
    并且 商品列表页面显示搜索结果             # None
    并且 搜索结果中的商品名称包含关键词 "iPhone" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 根据关键词搜索商品 -- @1.3 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 根据关键词搜索商品 -- @1.3
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 根据关键词搜索商品 -- @1.4   # features/product_management.feature:60
    假设 系统已经启动并运行正常          # None
    并且 测试数据库已经初始化           # None
    并且 系统中存在商品数据            # None
    假设 系统中存在商品数据            # None
    当 用户输入搜索关键词 "电脑"        # None
    那么 系统返回匹配的商品列表          # None
    并且 商品列表页面显示搜索结果         # None
    并且 搜索结果中的商品名称包含关键词 "电脑" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 根据关键词搜索商品 -- @1.4 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 根据关键词搜索商品 -- @1.4
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 搜索不存在的商品                 # features/product_management.feature:62
    假设 系统已经启动并运行正常             # None
    并且 测试数据库已经初始化              # None
    并且 系统中存在商品数据               # None
    假设 系统中存在商品数据               # None
    当 用户输入搜索关键词 "不存在的商品xyz123" # None
    那么 系统返回空的商品列表              # None
    并且 商品列表页面显示 "暂无相关商品"       # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 搜索不存在的商品
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 搜索不存在的商品
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 按分类筛选商品 -- @1.1   # features/product_management.feature:77
    假设 系统已经启动并运行正常        # None
    并且 测试数据库已经初始化         # None
    并且 系统中存在商品数据          # None
    假设 系统中存在商品数据          # None
    当 用户选择分类 "电子产品" 筛选商品  # None
    那么 系统返回该分类下的商品列表      # None
    并且 商品列表页面显示分类筛选结果     # None
    并且 返回的商品都属于分类 "电子产品"  # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 按分类筛选商品 -- @1.1 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 按分类筛选商品 -- @1.1
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 按分类筛选商品 -- @1.2   # features/product_management.feature:78
    假设 系统已经启动并运行正常        # None
    并且 测试数据库已经初始化         # None
    并且 系统中存在商品数据          # None
    假设 系统中存在商品数据          # None
    当 用户选择分类 "服装" 筛选商品    # None
    那么 系统返回该分类下的商品列表      # None
    并且 商品列表页面显示分类筛选结果     # None
    并且 返回的商品都属于分类 "服装"    # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 按分类筛选商品 -- @1.2 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 按分类筛选商品 -- @1.2
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 按分类筛选商品 -- @1.3   # features/product_management.feature:79
    假设 系统已经启动并运行正常        # None
    并且 测试数据库已经初始化         # None
    并且 系统中存在商品数据          # None
    假设 系统中存在商品数据          # None
    当 用户选择分类 "家居用品" 筛选商品  # None
    那么 系统返回该分类下的商品列表      # None
    并且 商品列表页面显示分类筛选结果     # None
    并且 返回的商品都属于分类 "家居用品"  # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 按分类筛选商品 -- @1.3 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 按分类筛选商品 -- @1.3
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 按分类筛选商品 -- @1.4   # features/product_management.feature:80
    假设 系统已经启动并运行正常        # None
    并且 测试数据库已经初始化         # None
    并且 系统中存在商品数据          # None
    假设 系统中存在商品数据          # None
    当 用户选择分类 "图书" 筛选商品    # None
    那么 系统返回该分类下的商品列表      # None
    并且 商品列表页面显示分类筛选结果     # None
    并且 返回的商品都属于分类 "图书"    # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 按分类筛选商品 -- @1.4 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 按分类筛选商品 -- @1.4
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 按价格排序商品 -- @1.1   # features/product_management.feature:91
    假设 系统已经启动并运行正常        # None
    并且 测试数据库已经初始化         # None
    并且 系统中存在商品数据          # None
    假设 系统中存在商品数据          # None
    当 用户选择按价格 "ASC" 排序    # None
    那么 系统返回排序后的商品列表       # None
    并且 商品列表页面显示按价格排序的商品   # None
    并且 商品按价格 "ASC" 排列     # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 按价格排序商品 -- @1.1 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 按价格排序商品 -- @1.1
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 按价格排序商品 -- @1.2   # features/product_management.feature:92
    假设 系统已经启动并运行正常        # None
    并且 测试数据库已经初始化         # None
    并且 系统中存在商品数据          # None
    假设 系统中存在商品数据          # None
    当 用户选择按价格 "DESC" 排序   # None
    那么 系统返回排序后的商品列表       # None
    并且 商品列表页面显示按价格排序的商品   # None
    并且 商品按价格 "DESC" 排列    # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 按价格排序商品 -- @1.2 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 按价格排序商品 -- @1.2
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 按名称排序商品 -- @1.1   # features/product_management.feature:102
    假设 系统已经启动并运行正常        # None
    并且 测试数据库已经初始化         # None
    并且 系统中存在商品数据          # None
    假设 系统中存在商品数据          # None
    当 用户选择按名称 "ASC" 排序    # None
    那么 系统返回排序后的商品列表       # None
    并且 商品列表页面显示按名称排序的商品   # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 按名称排序商品 -- @1.1 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 按名称排序商品 -- @1.1
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 按名称排序商品 -- @1.2   # features/product_management.feature:103
    假设 系统已经启动并运行正常        # None
    并且 测试数据库已经初始化         # None
    并且 系统中存在商品数据          # None
    假设 系统中存在商品数据          # None
    当 用户选择按名称 "DESC" 排序   # None
    那么 系统返回排序后的商品列表       # None
    并且 商品列表页面显示按名称排序的商品   # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 按名称排序商品 -- @1.2 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 按名称排序商品 -- @1.2
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 组合筛选和搜索                                 # features/product_management.feature:105
    假设 系统已经启动并运行正常                            # None
    并且 测试数据库已经初始化                             # None
    并且 系统中存在商品数据                              # None
    假设 系统中存在商品数据                              # None
    当 用户输入搜索关键词 "手机"，选择分类 "电子产品"，按价格 "ASC" 排序 # None
    那么 系统返回匹配的商品列表                            # None
    并且 商品列表页面显示筛选和搜索结果                        # None
    并且 返回的商品名称包含 "手机" 且属于 "电子产品" 分类           # None
    并且 商品按价格升序排列                              # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 组合筛选和搜索
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 组合筛选和搜索
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 成功获取商品详情              # features/product_management.feature:113
    假设 系统已经启动并运行正常          # None
    并且 测试数据库已经初始化           # None
    并且 系统中存在商品数据            # None
    假设 商品ID "1" 存在          # None
    当 用户请求商品详情，商品ID为 "1"    # None
    那么 系统返回完整的商品信息          # None
    并且 包含商品描述、规格、库存、评价等详细信息 # None
    并且 商品详情页面显示完整的商品信息      # None
    并且 显示商品图片、价格、库存状态       # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功获取商品详情
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功获取商品详情
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 获取不存在商品的详情             # features/product_management.feature:121
    假设 系统已经启动并运行正常           # None
    并且 测试数据库已经初始化            # None
    并且 系统中存在商品数据             # None
    假设 商品ID "99999" 不存在      # None
    当 用户请求商品详情，商品ID为 "99999" # None
    那么 系统返回404错误             # None
    并且 错误信息包含 "商品不存在"        # None
    并且 页面显示 "商品不存在" 的提示信息    # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 获取不存在商品的详情
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 获取不存在商品的详情
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 商品ID参数验证 -- @1.1      # features/product_management.feature:136
    假设 系统已经启动并运行正常            # None
    并且 测试数据库已经初始化             # None
    并且 系统中存在商品数据              # None
    假设 系统中存在商品数据              # None
    当 用户请求商品详情，商品ID为 "0"      # None
    那么 系统返回400错误              # None
    并且 错误信息包含 "商品ID必须是大于0的整数" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 商品ID参数验证 -- @1.1 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 商品ID参数验证 -- @1.1
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 商品ID参数验证 -- @1.2      # features/product_management.feature:137
    假设 系统已经启动并运行正常            # None
    并且 测试数据库已经初始化             # None
    并且 系统中存在商品数据              # None
    假设 系统中存在商品数据              # None
    当 用户请求商品详情，商品ID为 "-1"     # None
    那么 系统返回400错误              # None
    并且 错误信息包含 "商品ID必须是大于0的整数" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 商品ID参数验证 -- @1.2 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 商品ID参数验证 -- @1.2
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 商品ID参数验证 -- @1.3      # features/product_management.feature:138
    假设 系统已经启动并运行正常            # None
    并且 测试数据库已经初始化             # None
    并且 系统中存在商品数据              # None
    假设 系统中存在商品数据              # None
    当 用户请求商品详情，商品ID为 "abc"    # None
    那么 系统返回400错误              # None
    并且 错误信息包含 "商品ID必须是大于0的整数" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 商品ID参数验证 -- @1.3 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 商品ID参数验证 -- @1.3
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 商品ID参数验证 -- @1.4      # features/product_management.feature:139
    假设 系统已经启动并运行正常            # None
    并且 测试数据库已经初始化             # None
    并且 系统中存在商品数据              # None
    假设 系统中存在商品数据              # None
    当 用户请求商品详情，商品ID为 "null"   # None
    那么 系统返回400错误              # None
    并且 错误信息包含 "商品ID必须是大于0的整数" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 商品ID参数验证 -- @1.4 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 商品ID参数验证 -- @1.4
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 商品详情页面交互       # features/product_management.feature:141
    假设 系统已经启动并运行正常   # None
    并且 测试数据库已经初始化    # None
    并且 系统中存在商品数据     # None
    假设 商品ID "1" 存在   # None
    并且 用户在商品详情页面     # None
    当 用户查看商品详情       # None
    那么 页面显示商品的所有详细信息 # None
    并且 用户可以查看商品图片    # None
    并且 用户可以查看商品规格    # None
    并且 用户可以查看用户评价    # None
    并且 显示添加到购物车按钮    # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 商品详情页面交互
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 商品详情页面交互
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 成功获取商品列表        # features/product_management.feature:152
    假设 系统已经启动并运行正常          # None
    并且 测试数据库已经初始化           # None
    并且 系统中存在商品数据            # None
    假设 系统中存在商品数据            # None
    当 我通过API请求商品列表          # None
    那么 API返回状态码200          # None
    并且 API响应包含商品列表数据        # None
    并且 商品列表包含ID、名称、价格、图片等字段 # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 成功获取商品列表
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 成功获取商品列表
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 带分页参数获取商品列表          # features/product_management.feature:159
    假设 系统已经启动并运行正常               # None
    并且 测试数据库已经初始化                # None
    并且 系统中存在商品数据                 # None
    假设 系统中存在商品数据                 # None
    当 我通过API请求商品列表，页码为 2，每页数量为 5 # None
    那么 API返回状态码200               # None
    并且 API响应包含分页信息               # None
    并且 返回的商品数量不超过 5              # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 带分页参数获取商品列表
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 带分页参数获取商品列表
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 搜索商品       # features/product_management.feature:166
    假设 系统已经启动并运行正常     # None
    并且 测试数据库已经初始化      # None
    并且 系统中存在商品数据       # None
    假设 系统中存在商品数据       # None
    当 我通过API搜索关键词 "手机" # None
    那么 API返回状态码200     # None
    并且 API响应包含匹配的商品列表  # None
    并且 商品名称包含关键词 "手机"  # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 搜索商品
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 搜索商品
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 按分类筛选商品     # features/product_management.feature:173
    假设 系统已经启动并运行正常      # None
    并且 测试数据库已经初始化       # None
    并且 系统中存在商品数据        # None
    假设 系统中存在商品数据        # None
    当 我通过API筛选分类 "电子产品" # None
    那么 API返回状态码200      # None
    并且 API响应包含该分类的商品列表  # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 按分类筛选商品
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 按分类筛选商品
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 商品列表排序         # features/product_management.feature:179
    假设 系统已经启动并运行正常         # None
    并且 测试数据库已经初始化          # None
    并且 系统中存在商品数据           # None
    假设 系统中存在商品数据           # None
    当 我通过API请求商品列表，按价格升序排序 # None
    那么 API返回状态码200         # None
    并且 API响应包含排序后的商品列表     # None
    并且 商品按价格升序排列           # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 商品列表排序
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 商品列表排序
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 获取商品详情           # features/product_management.feature:186
    假设 系统已经启动并运行正常           # None
    并且 测试数据库已经初始化            # None
    并且 系统中存在商品数据             # None
    假设 商品ID "1" 存在           # None
    当 我通过API请求商品详情，商品ID为 "1" # None
    那么 API返回状态码200           # None
    并且 API响应包含完整的商品信息        # None
    并且 商品信息包含描述、规格、库存、评价等字段  # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 获取商品详情
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 获取商品详情
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 获取不存在商品的详情           # features/product_management.feature:193
    假设 系统已经启动并运行正常               # None
    并且 测试数据库已经初始化                # None
    并且 系统中存在商品数据                 # None
    假设 商品ID "99999" 不存在          # None
    当 我通过API请求商品详情，商品ID为 "99999" # None
    那么 API返回状态码404               # None
    并且 API响应包含商品不存在的错误信息         # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 获取不存在商品的详情
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 获取不存在商品的详情
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 无效的分页参数       # features/product_management.feature:199
    假设 系统已经启动并运行正常        # None
    并且 测试数据库已经初始化         # None
    并且 系统中存在商品数据          # None
    假设 系统中存在商品数据          # None
    当 我通过API请求商品列表，页码为 0  # None
    那么 API返回状态码400        # None
    并且 API响应包含参数验证失败的错误信息 # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 无效的分页参数
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 无效的分页参数
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 无效的商品ID                # features/product_management.feature:205
    假设 系统已经启动并运行正常                 # None
    并且 测试数据库已经初始化                  # None
    并且 系统中存在商品数据                   # None
    假设 系统中存在商品数据                   # None
    当 我通过API请求商品详情，商品ID为 "invalid" # None
    那么 API返回状态码400                 # None
    并且 API响应包含商品ID格式错误的信息          # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 无效的商品ID
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 无效的商品ID
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 搜索关键词长度验证      # features/product_management.feature:211
    假设 系统已经启动并运行正常         # None
    并且 测试数据库已经初始化          # None
    并且 系统中存在商品数据           # None
    假设 系统中存在商品数据           # None
    当 我通过API搜索超长关键词        # None
    那么 API返回状态码400         # None
    并且 API响应包含关键词长度限制的错误信息 # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 搜索关键词长度验证
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 搜索关键词长度验证
---- CAPTURED_SCENARIO_OUTPUT_END ----

功能: 用户注册 # features/register.feature:2
  作为一个新用户
  我想要能够注册账户
  以便使用系统服务
  功能: 用户注册  # features/register.feature:2

  场景: 请求验证码时手机号格式无效               # features/register.feature:11
    假如 系统已经启动                     # features/steps/login_steps.py:13
    并且 数据库已经初始化                   # features/steps/login_steps.py:20
    假如 用户在注册页面                    # features/steps/register_steps.py:12
      Traceback (most recent call last):
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\model.py", line 1991, in run
          match.run(runner.context)
          ~~~~~~~~~^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\matchers.py", line 105, in run
          self.func(context, *args, **kwargs)
          ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "features\steps\register_steps.py", line 16, in step_user_on_register_page
          context.register_page.navigate_to_register()
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      AttributeError: 'RegisterPage' object has no attribute 'navigate_to_register'. Did you mean: 'navigate_to_register_page'?

    当 用户输入一个无效的手机号"123"并点击"获取验证码" # None
    那么 系统不发送验证码                   # None
    并且 页面提示"请输入正确的手机号码"           # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 请求验证码时手机号格式无效
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 请求验证码时手机号格式无效
----
CAPTURED STDOUT: scenario
系统已经启动
数据库已经初始化
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 成功获取验证码                               # features/register.feature:17
    假如 系统已经启动                               # features/steps/login_steps.py:13
    并且 数据库已经初始化                             # features/steps/login_steps.py:20
    假如 用户在注册页面                              # features/steps/register_steps.py:12
      Traceback (most recent call last):
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\model.py", line 1991, in run
          match.run(runner.context)
          ~~~~~~~~~^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\matchers.py", line 105, in run
          self.func(context, *args, **kwargs)
          ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "features\steps\register_steps.py", line 16, in step_user_on_register_page
          context.register_page.navigate_to_register()
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      AttributeError: 'RegisterPage' object has no attribute 'navigate_to_register'. Did you mean: 'navigate_to_register_page'?

    当 用户输入一个格式正确的手机号"13900139000"并点击"获取验证码" # None
    那么 系统为该手机号生成一个6位验证码并打印在控制台              # None
    并且 "获取验证码"按钮进入60秒倒计时且不可点击               # None
    并且 数据库记录手机号和验证码，有效期为60秒                 # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功获取验证码
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功获取验证码
----
CAPTURED STDOUT: scenario
系统已经启动
数据库已经初始化
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 使用已注册的手机号进行注册           # features/register.feature:24
    假如 系统已经启动                 # features/steps/login_steps.py:13
    并且 数据库已经初始化               # features/steps/login_steps.py:20
    假如 一个手机号"13800138000"已被注册 # features/steps/login_steps.py:64
    并且 用户在注册页面                # features/steps/register_steps.py:12
      Traceback (most recent call last):
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\model.py", line 1991, in run
          match.run(runner.context)
          ~~~~~~~~~^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\matchers.py", line 105, in run
          self.func(context, *args, **kwargs)
          ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "features\steps\register_steps.py", line 16, in step_user_on_register_page
          context.register_page.navigate_to_register()
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      AttributeError: 'RegisterPage' object has no attribute 'navigate_to_register'. Did you mean: 'navigate_to_register_page'?

    当 用户使用该手机号和正确的验证码点击"注册"   # None
    那么 系统不创建新用户               # None
    并且 页面提示"该手机号已注册，将直接为您登录"  # None
    并且 用户成功登录并跳转到首页           # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 使用已注册的手机号进行注册
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 使用已注册的手机号进行注册
----
CAPTURED STDOUT: scenario
系统已经启动
数据库已经初始化
手机号 13800138000 已被注册
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 未同意用户协议时注册按钮的状态      # features/register.feature:32
    假如 系统已经启动              # features/steps/login_steps.py:13
    并且 数据库已经初始化            # features/steps/login_steps.py:20
    假如 用户在注册页面输入了手机号和验证码   # features/steps/register_steps.py:20
      Traceback (most recent call last):
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\model.py", line 1991, in run
          match.run(runner.context)
          ~~~~~~~~~^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\matchers.py", line 105, in run
          self.func(context, *args, **kwargs)
          ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "features\steps\register_steps.py", line 24, in step_user_entered_phone_and_code
          context.register_page.navigate_to_register()
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      AttributeError: 'RegisterPage' object has no attribute 'navigate_to_register'. Did you mean: 'navigate_to_register_page'?

    当 用户未勾选"同意《淘贝用户协议》"复选框 # None
    那么 "注册"按钮为不可点击状态       # None
    当 用户勾选"同意《淘贝用户协议》"复选框  # None
    那么 "注册"按钮变为可点击状态       # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 未同意用户协议时注册按钮的状态
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 未同意用户协议时注册按钮的状态
----
CAPTURED STDOUT: scenario
系统已经启动
数据库已经初始化
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 成功注册                                        # features/register.feature:39
    假如 系统已经启动                                     # features/steps/login_steps.py:13
    并且 数据库已经初始化                                   # features/steps/login_steps.py:20
    假如 用户在注册页面                                    # features/steps/register_steps.py:12
      Traceback (most recent call last):
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\model.py", line 1991, in run
          match.run(runner.context)
          ~~~~~~~~~^^^^^^^^^^^^^^^^
        File "d:\Project\taobei-app\.venv\Lib\site-packages\behave\matchers.py", line 105, in run
          self.func(context, *args, **kwargs)
          ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^
        File "features\steps\register_steps.py", line 16, in step_user_on_register_page
          context.register_page.navigate_to_register()
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      AttributeError: 'RegisterPage' object has no attribute 'navigate_to_register'. Did you mean: 'navigate_to_register_page'?

    当 用户输入未注册的手机号"13700137000"和正确的验证码，勾选协议并点击"注册" # None
    那么 系统在数据库中创建新用户                               # None
    并且 页面提示"注册成功"                                 # None
    并且 用户成功登录并自动跳转到首页                             # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功注册
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功注册
----
CAPTURED STDOUT: scenario
系统已经启动
数据库已经初始化
---- CAPTURED_SCENARIO_OUTPUT_END ----

功能: 用户管理 # features/user_management.feature:2
  作为一个已登录的用户
  我希望能够管理我的个人信息
  以便保持账户信息的准确性和安全性
  功能: 用户管理  # features/user_management.feature:2

  场景大纲: 成功更新用户信息 -- @1.1                                             # features/user_management.feature:20
    假设 系统已经启动并运行正常                                                   # None
    并且 测试数据库已经初始化                                                    # None
    假设 用户已登录                                                         # None
    当 用户提交有效的个人信息更新请求，昵称为 "小明"，头像为 "https://example.com/avatar1.jpg" # None
    那么 系统更新用户信息并返回成功响应                                               # None
    并且 返回更新后的用户信息                                                    # None
    并且 用户信息页面显示更新后的昵称 "小明"                                           # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功更新用户信息 -- @1.1 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功更新用户信息 -- @1.1
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 成功更新用户信息 -- @1.2                                               # features/user_management.feature:21
    假设 系统已经启动并运行正常                                                     # None
    并且 测试数据库已经初始化                                                      # None
    假设 用户已登录                                                           # None
    当 用户提交有效的个人信息更新请求，昵称为 "测试用户"，头像为 "https://example.com/avatar2.jpg" # None
    那么 系统更新用户信息并返回成功响应                                                 # None
    并且 返回更新后的用户信息                                                      # None
    并且 用户信息页面显示更新后的昵称 "测试用户"                                           # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功更新用户信息 -- @1.2 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功更新用户信息 -- @1.2
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 成功更新用户信息 -- @1.3                                              # features/user_management.feature:22
    假设 系统已经启动并运行正常                                                    # None
    并且 测试数据库已经初始化                                                     # None
    假设 用户已登录                                                          # None
    当 用户提交有效的个人信息更新请求，昵称为 "新昵称"，头像为 "https://example.com/avatar3.jpg" # None
    那么 系统更新用户信息并返回成功响应                                                # None
    并且 返回更新后的用户信息                                                     # None
    并且 用户信息页面显示更新后的昵称 "新昵称"                                           # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功更新用户信息 -- @1.3 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功更新用户信息 -- @1.3
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 更新用户信息 - 只更新昵称              # features/user_management.feature:24
    假设 系统已经启动并运行正常                # None
    并且 测试数据库已经初始化                 # None
    假设 用户已登录                      # None
    当 用户提交有效的个人信息更新请求，昵称为 "更新的昵称" # None
    那么 系统更新用户信息并返回成功响应            # None
    并且 返回更新后的用户信息                 # None
    并且 用户信息页面显示更新后的昵称 "更新的昵称"     # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 更新用户信息 - 只更新昵称
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 更新用户信息 - 只更新昵称
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 更新用户信息 - 只更新头像                                           # features/user_management.feature:31
    假设 系统已经启动并运行正常                                             # None
    并且 测试数据库已经初始化                                              # None
    假设 用户已登录                                                   # None
    当 用户提交有效的个人信息更新请求，头像为 "https://example.com/new-avatar.jpg" # None
    那么 系统更新用户信息并返回成功响应                                         # None
    并且 返回更新后的用户信息                                              # None
    并且 用户信息页面显示更新后的头像                                          # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 更新用户信息 - 只更新头像
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 更新用户信息 - 只更新头像
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 提交无效的用户信息 - 昵称验证失败 -- @1.1   # features/user_management.feature:46
    假设 系统已经启动并运行正常                   # None
    并且 测试数据库已经初始化                    # None
    假设 用户已登录                         # None
    当 用户提交包含无效昵称 "" 的更新请求            # None
    那么 系统返回400错误并提示具体的验证失败信息         # None
    并且 错误信息包含 "昵称长度必须在1-50个字符之间"     # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 提交无效的用户信息 - 昵称验证失败 -- @1.1 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 提交无效的用户信息 - 昵称验证失败 -- @1.1
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 提交无效的用户信息 - 昵称验证失败 -- @1.2                                # features/user_management.feature:47
    假设 系统已经启动并运行正常                                                # None
    并且 测试数据库已经初始化                                                 # None
    假设 用户已登录                                                      # None
    当 用户提交包含无效昵称 "这是一个非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的昵称" 的更新请求 # None
    那么 系统返回400错误并提示具体的验证失败信息                                      # None
    并且 错误信息包含 "昵称长度必须在1-50个字符之间"                                  # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 提交无效的用户信息 - 昵称验证失败 -- @1.2 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 提交无效的用户信息 - 昵称验证失败 -- @1.2
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 提交无效的用户信息 - 头像URL验证失败 -- @1.1   # features/user_management.feature:57
    假设 系统已经启动并运行正常                      # None
    并且 测试数据库已经初始化                       # None
    假设 用户已登录                            # None
    当 用户提交包含无效头像URL "invalid-url" 的更新请求 # None
    那么 系统返回400错误并提示具体的验证失败信息            # None
    并且 错误信息包含 "头像必须是有效的URL地址"           # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 提交无效的用户信息 - 头像URL验证失败 -- @1.1 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 提交无效的用户信息 - 头像URL验证失败 -- @1.1
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 提交无效的用户信息 - 头像URL验证失败 -- @1.2   # features/user_management.feature:58
    假设 系统已经启动并运行正常                      # None
    并且 测试数据库已经初始化                       # None
    假设 用户已登录                            # None
    当 用户提交包含无效头像URL "not-a-url" 的更新请求   # None
    那么 系统返回400错误并提示具体的验证失败信息            # None
    并且 错误信息包含 "头像必须是有效的URL地址"           # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 提交无效的用户信息 - 头像URL验证失败 -- @1.2 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 提交无效的用户信息 - 头像URL验证失败 -- @1.2
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景大纲: 提交无效的用户信息 - 头像URL验证失败 -- @1.3     # features/user_management.feature:59
    假设 系统已经启动并运行正常                        # None
    并且 测试数据库已经初始化                         # None
    假设 用户已登录                              # None
    当 用户提交包含无效头像URL "ftp://invalid" 的更新请求 # None
    那么 系统返回400错误并提示具体的验证失败信息              # None
    并且 错误信息包含 "头像必须是有效的URL地址"             # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 提交无效的用户信息 - 头像URL验证失败 -- @1.3 
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 提交无效的用户信息 - 头像URL验证失败 -- @1.3
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 提交无效的用户信息 - 空的更新请求     # features/user_management.feature:61
    假设 系统已经启动并运行正常           # None
    并且 测试数据库已经初始化            # None
    假设 用户已登录                 # None
    当 用户提交空的个人信息更新请求         # None
    那么 系统返回400错误并提示具体的验证失败信息 # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 提交无效的用户信息 - 空的更新请求
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 提交无效的用户信息 - 空的更新请求
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 成功注销           # features/user_management.feature:66
    假设 系统已经启动并运行正常   # None
    并且 测试数据库已经初始化    # None
    假设 用户已登录         # None
    当 用户发起注销请求       # None
    那么 系统清除用户的登录状态   # None
    并且 返回注销成功响应      # None
    并且 用户被重定向到登录页面   # None
    并且 用户无法访问需要登录的页面 # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 成功注销
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 成功注销
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 注销后再次访问需要登录的页面  # features/user_management.feature:74
    假设 系统已经启动并运行正常    # None
    并且 测试数据库已经初始化     # None
    假设 用户已登录          # None
    并且 用户已成功注销        # None
    当 用户尝试访问用户信息页面    # None
    那么 用户被重定向到登录页面    # None
    并且 页面显示 "请先登录"    # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 注销后再次访问需要登录的页面
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 注销后再次访问需要登录的页面
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 未登录用户尝试更新信息     # features/user_management.feature:81
    假设 系统已经启动并运行正常    # None
    并且 测试数据库已经初始化     # None
    假设 用户未登录          # None
    当 用户尝试提交个人信息更新请求  # None
    那么 系统返回401错误      # None
    并且 错误信息包含 "未授权访问" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 未登录用户尝试更新信息
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 未登录用户尝试更新信息
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: 未登录用户尝试注销       # features/user_management.feature:87
    假设 系统已经启动并运行正常    # None
    并且 测试数据库已经初始化     # None
    假设 用户未登录          # None
    当 用户尝试发起注销请求      # None
    那么 系统返回401错误      # None
    并且 错误信息包含 "未授权访问" # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: 未登录用户尝试注销
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: 未登录用户尝试注销
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 成功获取用户信息      # features/user_management.feature:94
    假设 系统已经启动并运行正常        # None
    并且 测试数据库已经初始化         # None
    假设 用户通过API已登录         # None
    当 我通过API请求获取用户信息      # None
    那么 API返回状态码200        # None
    并且 API响应包含用户信息        # None
    并且 用户信息包含手机号、昵称、头像等字段 # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 成功获取用户信息
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 成功获取用户信息
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 成功更新用户信息                                                      # features/user_management.feature:101
    假设 系统已经启动并运行正常                                                        # None
    并且 测试数据库已经初始化                                                         # None
    假设 用户通过API已登录                                                         # None
    当 我通过API更新用户信息，昵称为 "API测试昵称"，头像为 "https://example.com/api-avatar.jpg" # None
    那么 API返回状态码200                                                        # None
    并且 API响应包含更新成功的消息                                                     # None
    并且 API响应包含更新后的用户信息                                                    # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 成功更新用户信息
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 成功更新用户信息
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 更新用户信息验证失败    # features/user_management.feature:108
    假设 系统已经启动并运行正常        # None
    并且 测试数据库已经初始化         # None
    假设 用户通过API已登录         # None
    当 我通过API提交包含无效昵称的更新请求 # None
    那么 API返回状态码400        # None
    并且 API响应包含验证失败的错误信息   # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 更新用户信息验证失败
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 更新用户信息验证失败
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 成功注销      # features/user_management.feature:114
    假设 系统已经启动并运行正常    # None
    并且 测试数据库已经初始化     # None
    假设 用户通过API已登录     # None
    当 我通过API发起注销请求    # None
    那么 API返回状态码200    # None
    并且 API响应包含注销成功的消息 # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 成功注销
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 成功注销
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 未授权访问用户信息  # features/user_management.feature:120
    假设 系统已经启动并运行正常     # None
    并且 测试数据库已经初始化      # None
    假设 用户未通过API登录      # None
    当 我通过API请求获取用户信息   # None
    那么 API返回状态码401     # None
    并且 API响应包含未授权的错误信息 # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 未授权访问用户信息
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 未授权访问用户信息
---- CAPTURED_SCENARIO_OUTPUT_END ----

  场景: API - 使用无效token访问用户信息  # features/user_management.feature:126
    假设 系统已经启动并运行正常           # None
    并且 测试数据库已经初始化            # None
    假设 我使用无效的token           # None
    当 我通过API请求获取用户信息         # None
    那么 API返回状态码401           # None
    并且 API响应包含token无效的错误信息   # None
----
CAPTURED STDOUT: before_scenario
=== before_scenario 被调用 ===
开始执行场景: API - 使用无效token访问用户信息
浏览器已初始化: True
浏览器上下文已初始化: True
页面驱动已初始化: True
----
CAPTURED STDOUT: after_scenario
场景执行完成: API - 使用无效token访问用户信息
---- CAPTURED_SCENARIO_OUTPUT_END ----

